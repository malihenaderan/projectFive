{"version":3,"sources":["Inputs.js","App.js","serviceWorker.js","index.js"],"names":["Inputs","class","action","htmlFor","type","required","placeholder","id","value","this","props","tution","onChange","e","accomodation","transportation","foods","name","total","Component","App","handleChange","event","eventType","newTotal","state","parseInt","target","setState","getUserChoice","userChoice","handleSubmit","preventDefault","calculate","showTotal","rates","conversionRates","ratesNumers","axios","url","method","responseType","params","access_key","then","response","data","conversion_rates","ratesArray","rateName","oneRate","rateValue","currencyName","push","Object","keys","values","className","onSubmit","map","rate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oQAgCiBA,E,uKA3BH,IAAD,OACP,OACE,6BACE,0BAAMC,MAAM,cAAaC,OAAQ,UACjC,2BAAOC,QAAQ,UAAf,eACA,2BAAOC,KAAK,OAAQC,UAAQ,EAACC,YAAY,oBAAoBC,GAAG,SAASC,MAAOC,KAAKC,MAAMC,OAAQC,SAAU,SAACC,GAAD,OAAK,EAAKH,MAAME,SAASC,EAAE,aAExI,2BAAOV,QAAQ,gBAAf,gBACA,2BAAOC,KAAK,OAAOC,UAAQ,EAACC,YAAY,qBAAqBC,GAAG,eAAeC,MAAOC,KAAKC,MAAMI,aAAaF,SAAU,SAACC,GAAD,OAAK,EAAKH,MAAME,SAASC,EAAE,mBAEnJ,2BAAOV,QAAQ,kBAAf,kBACA,2BAAOC,KAAK,OAAOC,UAAQ,EAACC,YAAY,uBAAuBC,GAAG,iBAAiBC,MAAOC,KAAKC,MAAMK,eAAgBH,SAAU,SAACC,GAAD,OAAK,EAAKH,MAAME,SAASC,EAAE,qBAE1J,2BAAOV,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOC,UAAQ,EAACC,YAAY,cAAcC,GAAG,QAAQC,MAAOC,KAAKC,MAAMM,MAAOJ,SAAU,SAACC,GAAD,OAAK,EAAKH,MAAME,SAASC,EAAE,YAE/H,2BAAOV,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOa,KAAK,QAAQV,GAAG,QAASC,MAAOC,KAAKC,MAAMQ,MAAON,SAAU,SAACC,GAAD,OAAK,EAAKH,MAAME,SAASC,EAAE,gB,GApB/FM,a,iBC2HNC,G,wDAtHb,aAAc,IAAD,8BACX,gBAiDFC,aAAa,SAACC,EAAOC,GAAc,IAAD,EAE1BC,EAAS,EAAKC,MAAMP,MAAMQ,SAASJ,EAAMK,OAAOnB,MAAO,IAC7D,EAAKoB,UAAL,mBACGL,EAAWD,EAAMK,OAAOnB,OAD3B,sBAEQgB,GAFR,KArDW,EA2DbK,cAAc,SAACP,GACb,EAAKM,SAAS,CACVE,WAAWR,EAAMK,OAAOnB,SA7DjB,EAiEbuB,aAAe,SAACT,GACdA,EAAMU,iBACP,IAAMC,EAAY,EAAKR,MAAMP,MAAM,EAAKO,MAAMK,WAE7C,EAAKF,SAAS,CACdK,UAAUA,EACVC,WAAU,KArEV,EAAKT,MAAO,CACVU,MAAM,GACNC,gBAAgB,GAChBC,YAAY,GACZ1B,OAAO,GACPG,aAAa,GACbC,eAAe,GACfC,MAAM,GACNE,MAAM,EACNM,SAAS,GACTM,WAAW,GACXI,WAAU,GAbD,E,gEAmBQ,IAAD,OAClBI,IAAM,CACJC,IAAI,4EACJC,OAAO,MACPC,aAAa,OACbC,OAAQ,CACNC,WAAW,8BAGdC,MAAM,SAACC,GAEN,IAAMV,EAAOU,EAASC,KAAKC,iBACrBC,EAAW,GACjB,IAAI,IAAMC,KAAYd,EAAM,CAC1B,IAAMe,EAAU,CACdC,UAAUhB,EAAMc,GAChBG,aAAaH,GAEfD,EAAWK,KAAKH,GAElB,IAAMd,EAAkBkB,OAAOC,KAAKpB,GAC9BE,EAAciB,OAAOE,OAAOrB,GAClC,EAAKP,SAAS,CACZO,MAAOa,EACPZ,gBAAgBA,EAChBC,YAAYA,S,+BAkChB,OACE,yBAAKoB,UAAU,eACb,gCAAQ,2DAEV,kBAAC,EAAD,CACArD,KAAK,OACLQ,SAAUH,KAAKY,aACfV,OAAQF,KAAKgB,MAAMd,OACnBG,aAAcL,KAAKgB,MAAMX,aACzBC,eAAgBN,KAAKgB,MAAMV,eAC3BC,MAAOP,KAAKgB,MAAMT,MAClBE,MAAOT,KAAKgB,MAAMP,QAGlB,0BAAMhB,OAAO,GAAIwD,SAAUjD,KAAKsB,cAC9B,4BAAQ0B,UAAU,SAAS7C,SAAUH,KAAKoB,cAAerB,MAAOC,KAAKgB,MAAMK,WAAab,KAAK,aAAaV,GAAG,cAEvGE,KAAKgB,MAAMU,MAAMwB,KAAI,SAACC,GACtB,OAAQ,4BAAQpD,MAAOoD,EAAKT,WAAYS,EAAKR,kBAMnD,4BAAQK,UAAU,MAAMrD,KAAK,UAA7B,cAIAK,KAAKgB,MAAMS,UACX,4CAAkBzB,KAAKgB,MAAMQ,WAC3B,U,GA7GQd,cCME0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.27ff5027.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Inputs extends Component {\r\n  \r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <form class=\"inputClass \"action= \"submit\">\r\n          <label htmlFor=\"tution\"> Tution fee</label>\r\n          <input type=\"text\"  required placeholder=\"Tution fees (CAD)\" id=\"tution\" value={this.props.tution} onChange={(e)=>this.props.onChange(e,\"tution\")} />\r\n        \r\n          <label htmlFor=\"accomodation\">Accomodation</label>\r\n          <input type=\"text\" required placeholder=\"accomodation (CAD)\" id=\"accomodation\" value={this.props.accomodation}onChange={(e)=>this.props.onChange(e,\"accomodation\")} />\r\n\r\n          <label htmlFor=\"transportation\">Transportation</label>\r\n          <input type=\"text\" required placeholder=\"transportation (CAD)\" id=\"transportation\" value={this.props.transportation} onChange={(e)=>this.props.onChange(e,\"transportation\")}/>\r\n\r\n          <label htmlFor=\"foods\">Foods</label>\r\n          <input type=\"text\" required placeholder=\"foods (CAD)\" id=\"foods\" value={this.props.foods} onChange={(e)=>this.props.onChange(e,\"foods\")} />\r\n\r\n          <label htmlFor=\"total\">Total</label>\r\n          <input type=\"text\" name=\"total\" id=\"total\"  value={this.props.total} onChange={(e)=>this.props.onChange(e,\"sum\")}  />\r\n          \r\n          </form>\r\n        \r\n        </div>\r\n      ) \r\n      \r\n    }\r\n  }\r\n\r\n  export default Inputs;","import React, {Component} from 'react';\nimport Inputs from './Inputs.js';\nimport axios from 'axios';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state ={\n      rates:[],\n      conversionRates:[],\n      ratesNumers:[],\n      tution:\"\",\n      accomodation:\"\",\n      transportation:\"\",\n      foods:\"\",\n      total:0,\n      newTotal:\"\",\n      userChoice:\"\",\n      showTotal:false\n\n    }\n    \n  }\n \n  componentDidMount() {\n    axios({\n      url: `https://prime.exchangerate-api.com/v5/dabf728b046cca5ce5db9310/latest/CAD`,\n      method: `GET`,\n      responseType: `json`,\n      params: {\n        access_key: `dabf728b046cca5ce5db9310`\n      }\n    })\n    .then( (response) => {\n      \n      const rates= response.data.conversion_rates;\n      const ratesArray=[];\n      for(const rateName in rates){\n        const oneRate = {\n          rateValue:rates[rateName],\n          currencyName:rateName\n        };  \n        ratesArray.push(oneRate);\n      }\n      const conversionRates = Object.keys(rates);\n      const ratesNumers = Object.values(rates);\n      this.setState({\n        rates: ratesArray,\n        conversionRates:conversionRates,\n        ratesNumers:ratesNumers\n      })\n    })\n  }\n  \n \n  handleChange=(event, eventType)=> {\n    \n    const newTotal=this.state.total+parseInt(event.target.value ,10)\n    this.setState({\n      [eventType]:event.target.value,\n      total:newTotal\n    })\n  }\n \n  getUserChoice=(event)=>{\n    this.setState({\n        userChoice:event.target.value\n    })\n  }\n \n  handleSubmit = (event) => {\n    event.preventDefault();\n   const calculate = this.state.total*this.state.userChoice\n \n    this.setState({\n    calculate:calculate,\n    showTotal:true\n    })\n    \n  }\n \n  render(){\n  \n    return (\n      <div className=\"app wrapper\">\n        <header><h1>How much is your expenses?</h1></header>\n\n      <Inputs \n      type=\"text\" \n      onChange={this.handleChange}\n      tution={this.state.tution} \n      accomodation={this.state.accomodation}\n      transportation={this.state.transportation}\n      foods={this.state.foods}\n      total={this.state.total}\n      />\n\n      <form action=\"\"  onSubmit={this.handleSubmit}  >\n        <select className=\"select\" onChange={this.getUserChoice} value={this.state.userChoice}  name=\"rateChange\" id=\"rateChange\">\n            {\n              this.state.rates.map((rate)=>{\n              return (<option value={rate.rateValue}>{rate.currencyName}</option>)\n              })\n            }\n      \n        </select>\n\n        <button className=\"btn\" type=\"submit\"  >Calculate</button>\n        </form>\n\n      {\n        this.state.showTotal \n      ? <h2>the total is {this.state.calculate}</h2>\n        : null\n      }\n     \n      </div>\n      \n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}